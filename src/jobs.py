from string import Template
import logging

from telegram.ext import CallbackContext

from src.core.send_message import send_message
from src.service import ConreateAPIService


async def weekly_stat_job(context: CallbackContext) -> None:
    """
    Send weekly statistics on the number of requests in the work
    """
    week_statistic_obj = await ConreateAPIService().get_week_stat()
    pre_message = Template(
        '–í—ã –¥–µ–ª–∞–ª–∏ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ 7 –¥–Ω–µ–π!\n'
        '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –Ω–µ–¥–µ–ª—è  –≤ *""–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å""*\n'
        '–ó–∞–∫—Ä—ã—Ç–æ –∑–∞—è–≤–æ–∫ - *$tickets_closed*\n'
        '–í —Ä–∞–±–æ—Ç–µ *$tikets_in_work* –∑–∞—è–≤–æ–∫  –∑–∞ –Ω–µ–¥–µ–ª—é\n\n'
        '–ò—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ —É *$tickets_expiring –∑–∞—è–≤–æ–∫*\n'
        '–£ *$tickets_expired* –∑–∞—è–≤–æ–∫ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫\n\n'
        '–û—Ç–∫—Ä—ã—Ç—å [Trello](https://trello.com)\n\n'
        '–ú—ã —Ä–∞–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ :)\n'
        '*–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!*'
    )
    for user_statistic in week_statistic_obj.week_stat:
        if user_statistic.username not in context.bot_data['username_to_id']:
            logging.warning(
                f'User with username {user_statistic.username} '
                f'not found in bot data. Maybe user not run bot '
                f'or not authenticated in bot')
            continue
        chat_id = context.bot_data['username_to_id'][user_statistic.username]
        message = pre_message.substitute(
            tickets_closed=user_statistic.last_week_user_tickets_closed,
            tikets_in_work=user_statistic.last_week_user_tikets_in_work,
            tickets_expiring=user_statistic.last_week_user_tickets_expiring,
            tickets_expired=user_statistic.last_week_user_tickets_expired,
        )
        await send_message(
            context=context,
            chat_id=chat_id,
            text=message,
        )


async def monthly_receipt_reminder_job(context: CallbackContext) -> None:
    """
    Send monthly reminder about the receipt formation during payment
    Only for self-employed users
    """


async def monthly_stat_job(context: CallbackContext) -> None:
    """
    Send monthly statistics on the number of successfully
    closed requests.
    Only if the user had requests
    """
    mont_statistic_obj = await ConreateAPIService().get_month_stat()
    pre_message = Template(
        '–≠—Ç–æ –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü!\n'
        '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –æ–Ω –ø—Ä–æ—à–µ–ª –≤ *""–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å""* üî•\n\n'
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ - *$tickets_closed*\n'
        '–†–µ–π—Ç–∏–Ω–≥ - *$rating*\n'
        '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - *$ticket_resolve_avg_time*\n\n'
        '–û—Ç–∫—Ä—ã—Ç—å [Trello](https://trello.com)\n\n'
        '–ú—ã —Ä–∞–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ :)\n'
        '*–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!*'
    )
    for user_statistic in mont_statistic_obj.month_stat:
        if user_statistic.username not in context.bot_data['username_to_id']:
            logging.warning(
                f'User with username {user_statistic.username} '
                f'not found in bot data. Maybe user not run bot '
                f'or not authenticated in bot')
            continue
        chat_id = context.bot_data['username_to_id'][user_statistic.username]
        message = pre_message.substitute(
            tickets_closed=user_statistic.user_tickets_closed,
            rating=user_statistic.user_rating,
            ticket_resolve_avg_time=user_statistic.user_ticket_resolve_avg_time,
        )
        await send_message(
            context=context,
            chat_id=chat_id,
            text=message,
        )
