import datetime

import pytz
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from timezonefinder import TimezoneFinder

from constants import callback_data, states
from core.config import URL_SERVICE_RULES
from core.send_message import send_message
from get_timezone import get_timezone, set_timezone
from service.api_client import APIService

TIME_ZONE = "UTC"


async def timezone_message_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends a message after a successful timezone installation.
    """
    await send_message(
        context=context,
        chat_id=update.effective_user.id,
        text="–í—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
    )


async def get_timezone_from_location_callback(update: Update, context: CallbackContext):
    """
    Sets timezone by geolocation.
    """
    user_timezone = TimezoneFinder().timezone_at(
        lng=update.message.location.longitude, lat=update.message.location.latitude
    )
    if user_timezone is None:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: UTC+03:00",
        )
        return states.TIMEZONE_STATE
    time_zone = pytz.timezone(user_timezone)
    utc_time = datetime.datetime.utcnow()
    utc = float(time_zone.utcoffset(utc_time).total_seconds() / 3600)
    hours, minutes = divmod(utc * 60, 60)
    utc = f"{hours:+03.0f}:{minutes:02.0f}"
    text_utc = TIME_ZONE + utc
    await set_timezone(update.effective_chat.id, text_utc, context)
    await timezone_message_callback(update, context)
    return states.MENU_STATE


async def get_timezone_from_text_message_callback(update: Update, context: CallbackContext):
    """
    Sets timezone based on a text message from the user.
    """
    text = str(update.message.text)
    if text == "–ù–∞–ø–∏—à—É —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É —Å–∞–º":
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É UTC. –ù–∞–ø—Ä–∏–º–µ—Ä: UTC+03:00",
        )
        return states.TIMEZONE_STATE
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–∞–π–º–∑–æ–Ω—É X",
    )
    await timezone_message_callback(update, context)
    return states.MENU_STATE


async def start(update: Update, context: CallbackContext):
    """
    Responds to the start command. The entry point to telegram bot.
    """
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=callback_data.CALLBACK_IS_EXPERT_COMMAND),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=callback_data.CALLBACK_NOT_EXPERT_COMMAND),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–∞–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å. "
        "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º?",
        reply_markup=reply_markup,
    )
    return states.UNAUTHORIZED_STATE


async def not_expert_callback(update: Update, context: CallbackContext):
    """
    Invites the user to become an expert.
    """
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=callback_data.CALLBACK_REGISTR_AS_EXPERT_COMMAND),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=callback_data.CALLBACK_SUPPORT_OR_CONSULT_COMMAND),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        text="–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã '–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'. –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º "
        "—ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –±–ª–∏–∑–∫–∏—Ö?",
        reply_markup=reply_markup,
    )
    return states.REGISTRATION_STATE


async def support_or_consult_callback(update: Update, context: CallbackContext):
    """
    Offers to support the project.
    """
    await update.callback_query.message.reply_text(
        text="–ù–∞—à –ü—Ä–æ–µ–∫—Ç\nhttps://ask.nenaprasno.ru/\n–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å\nhttps://ask.nenaprasno.ru/#donation"
    )
    return ConversationHandler.END


async def registr_as_expert_callback(update: Update, context: CallbackContext):
    """
    Sends a registration form to the user.
    """
    await update.callback_query.message.reply_text(
        text="–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤! –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏. "
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç—É –∞–Ω–∫–µ—Ç—É "
        "https://docs.google.com/forms/d/1GvlemFyhMyVy_Wf91NPYTAfD5717W44-Ge7HQ6ealA0/edit (–Ω—É–∂–Ω–æ 15 –º–∏–Ω—É—Ç). "
        "–ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ "
        "–≤–∏–¥–µ–æ–∏–Ω—Ç–µ—Ä–≤—å—é. –ü–µ—Ä–µ–¥ –∏–Ω—Ç–µ—Ä–≤—å—é –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –µ–≥–æ –Ω–∞ "
        "–≤—Å—Ç—Ä–µ—á–µ. –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ :)"
    )
    return ConversationHandler.END


async def is_expert_callback(update: Update, context: CallbackContext):
    """
    try to authenticate telegram user on site API and write trello_id to persistence file
    """
    api_service = APIService()
    telegram_id = update.effective_user.id
    user_data = await api_service.authenticate_user(telegram_id=telegram_id)
    if user_data is None:
        await update.callback_query.edit_message_text(text="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return states.UNAUTHORIZED_STATE
    context.user_data["user_name"] = user_data.user_name
    context.user_data["user_time_zone"] = user_data.user_time_zone
    await update.callback_query.edit_message_text(
        text=f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n" f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_data.user_name}"
    )
    await update.callback_query.message.reply_text(
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ñ–µ–Ω—è –ö—Ä–∞–±, "
        "—è telegram-bot –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã "
        "'–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'. –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö, "
        "–ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ "
        "–∏ –∏—Ö –±–ª–∏–∑–∫–∏—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö. "
        "–ù–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. –ù–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –¥–µ–ª–µ! "
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    await update.callback_query.answer()
    await get_timezone(update, context)
    return states.TIMEZONE_STATE


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Displays the menu.
    """
    menu_buttons = [
        [
            InlineKeyboardButton(
                text="‚åö –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=callback_data.CALLBACK_CONFIGURATE_TIMEZONE_COMMAND
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data=callback_data.CALLBACK_STATISTIC_MONTH_COMMAND
            ),
        ],
        [
            InlineKeyboardButton(
                text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data=callback_data.CALLBACK_STATISTIC_WEEK_COMMAND
            )
        ],
        [InlineKeyboardButton(text="üìå –í —Ä–∞–±–æ—Ç–µ", callback_data=callback_data.CALLBACK_ACTUAL_REQUESTS_COMMAND)],
        [InlineKeyboardButton(text="üî• —Å—Ä–æ–∫–∏ –≥–æ—Ä—è—Ç", callback_data=callback_data.CALLBACK_OVERDUE_REQUESTS_COMMAND)],
        [
            InlineKeyboardButton(
                text="üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞",
                url=URL_SERVICE_RULES,
            )
        ],
    ]
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=InlineKeyboardMarkup(menu_buttons))
    return states.MENU_STATE


async def configurate_timezone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Makes the timezone setting.
    """
    await get_timezone(update, context)
    return states.TIMEZONE_STATE


async def statistic_month_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends monthly statistics to the user.
    """
    await update.callback_query.message.reply_text(text="statistic_month_callback")
    return states.MENU_STATE


async def statistic_week_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends weekly statistics to the user.
    """
    await update.callback_query.message.reply_text(text="statistic_week_callback")
    return states.MENU_STATE


async def actual_requests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends a list of current requests/requests to the user.
    """
    await update.callback_query.message.reply_text(text="actual_requests_callback")
    return states.MENU_STATE


async def overdue_requests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends to the user a list of overdue applications/requests or those that are running out of time.
    """
    await update.callback_query.message.reply_text(text="overdue_requests_callback")
    return states.MENU_STATE


start_command_handler = CommandHandler("start", start)
menu_command_handler = CommandHandler("menu", menu)
get_timezone_command_handler = CommandHandler("get_timezone", get_timezone)

authorized_user_command_handlers = (
    menu_command_handler,
    get_timezone_command_handler,
)


start_conversation = ConversationHandler(
    allow_reentry=True,
    persistent=True,
    name="start_conversation",
    entry_points=[start_command_handler],
    states={
        states.UNAUTHORIZED_STATE: [
            CallbackQueryHandler(is_expert_callback, pattern=callback_data.CALLBACK_IS_EXPERT_COMMAND),
            CallbackQueryHandler(not_expert_callback, pattern=callback_data.CALLBACK_NOT_EXPERT_COMMAND),
        ],
        states.REGISTRATION_STATE: [
            CallbackQueryHandler(registr_as_expert_callback, pattern=callback_data.CALLBACK_REGISTR_AS_EXPERT_COMMAND),
            CallbackQueryHandler(
                support_or_consult_callback, pattern=callback_data.CALLBACK_SUPPORT_OR_CONSULT_COMMAND
            ),
        ],
        states.TIMEZONE_STATE: [
            *authorized_user_command_handlers,
            MessageHandler(filters.LOCATION, get_timezone_from_location_callback),
            MessageHandler(filters.TEXT, get_timezone_from_text_message_callback),
        ],
        states.MENU_STATE: [
            *authorized_user_command_handlers,
            CallbackQueryHandler(
                configurate_timezone_callback, pattern=callback_data.CALLBACK_CONFIGURATE_TIMEZONE_COMMAND
            ),
            CallbackQueryHandler(statistic_month_callback, pattern=callback_data.CALLBACK_STATISTIC_MONTH_COMMAND),
            CallbackQueryHandler(statistic_week_callback, pattern=callback_data.CALLBACK_STATISTIC_WEEK_COMMAND),
            CallbackQueryHandler(actual_requests_callback, pattern=callback_data.CALLBACK_ACTUAL_REQUESTS_COMMAND),
            CallbackQueryHandler(overdue_requests_callback, pattern=callback_data.CALLBACK_OVERDUE_REQUESTS_COMMAND),
        ],
    },
    fallbacks=[],
)
