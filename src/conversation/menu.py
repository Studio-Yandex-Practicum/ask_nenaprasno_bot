from datetime import timedelta
from typing import Dict, List

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, CommandHandler, ContextTypes, ConversationHandler

from constants import callback_data, states
from conversation.timezone import set_timezone_from_keyboard, timezone_conversation
from core.config import URL_SERVICE_RULES
from core.send_message import reply_message
from core.utils import build_consultation_url, build_trello_url, get_word_case
from decorators.logger import async_error_logger
from get_timezone import get_user_timezone
from service.api_client import APIService

OVERDUE_TEMPLATE = (
    "–í—Ä–µ–º—è –∏ —Å—Ç–µ–∫–ª–æ üòé\n"
    "–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - {expired_consultations}\n"
    "–í–µ—Ä–∏–º –∏ –∂–¥–µ–º.\n\n"
    "{link_nenaprasno}\n"
    "----\n"
    "–í —Ä–∞–±–æ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ - {active_consultations}\n"
    "[–û—Ç–∫—Ä—ã—Ç—å Trello]({trello_url})\n\n"
)

ACTUAL_TEMPLATE = (
    "–£ –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ {active_consultations} {declination_consultation}.\n"
    "{link_nenaprasno}\n"
    "[–û—Ç–∫—Ä—ã—Ç—å Trello]({trello_url})\n\n"
)


@async_error_logger(name="conversation.menu_commands.menu")
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    Displays the menu.
    """
    user_tz = await get_user_timezone(int(update.effective_user.id), context)
    menu_buttons = [
        [
            InlineKeyboardButton(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data=callback_data.CALLBACK_STATISTIC_MONTH_COMMAND
            ),
        ],
        [InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç–µ", callback_data=callback_data.CALLBACK_ACTUAL_REQUESTS_COMMAND)],
        [InlineKeyboardButton(text="üî• C—Ä–æ–∫–∏ –≥–æ—Ä—è—Ç", callback_data=callback_data.CALLBACK_OVERDUE_REQUESTS_COMMAND)],
        [
            InlineKeyboardButton(
                text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞",
                url=URL_SERVICE_RULES,
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—Å–µ–π—á–∞—Å {user_tz})",
                callback_data=callback_data.CALLBACK_CONFIGURATE_TIMEZONE_COMMAND,
            )
        ],
    ]
    await reply_message(update=update, text="–ú–µ–Ω—é", reply_markup=InlineKeyboardMarkup(menu_buttons))
    return states.MENU_STATE


@async_error_logger(name="conversation.requests.actual_requests_callback")
async def button_reaction_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """
    Sends a list of current requests/requests to the user.
    """
    await reply_message(update=update, text="button reaction callback")
    return states.MENU_STATE


def format_average_user_answer_time(time: float | None) -> str:
    if time is None:
        return ""

    average_answer_time = timedelta(days=0, hours=0, milliseconds=time)
    days = average_answer_time.days
    hours = average_answer_time.seconds // 3600
    output_days = get_word_case(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
    output_hours = get_word_case(hours, "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")

    return f"***–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞*** - {days} {output_days} {hours} {output_hours}\n"


def format_rating(rating: float | None) -> str:
    if rating is None:
        return ""

    return f"***–†–µ–π—Ç–∏–Ω–≥*** - {rating:.1f}\n"


@async_error_logger(name="conversation.requests.button_statistic_month_callback")
async def button_statistic_month_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Send monthly statistics at the user's request.
    """
    service = APIService()
    telegram_id = update.effective_user.id
    user_statistics = await service.get_user_month_stat(telegram_id=telegram_id)

    if user_statistics is None:
        await update.callback_query.message.reply_text(text="–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
        return

    if user_statistics.closed_consultations > 0:
        message = (
            '–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –¥–ª—è "–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å" üî•\n'
            f"***–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫*** - {user_statistics.closed_consultations}\n"
            f"{format_rating(user_statistics.rating)}"
            f"{format_average_user_answer_time(user_statistics.average_user_answer_time)}"
            "\n–ú—ã —Ä–∞–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ :)\n"
            "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        )
    else:
        message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ :(\n–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –≤—Å–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è! :)"

    await reply_message(update=update, text=message)


def make_consultations_list(consultations_list: List[Dict]) -> str:
    if any(consultations_list):
        return (
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ:\n"
            + "\n".join(
                [
                    f"{number}. [–ó–∞—è–≤–∫–∞ {consultation['number']}]({build_consultation_url(consultation['id'])})"
                    for number, consultation in enumerate(consultations_list, start=1)
                ]
            )
            + "\n"
        )
    return ""


@async_error_logger(name="conversation.requests.button_actual_requests_callback")
async def button_actual_requests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Sends a list of active consultations to the user.
    """
    service = APIService()
    telegram_id = update.effective_user.id
    active_consultations = await service.get_user_active_consultations(telegram_id=telegram_id)

    if active_consultations is None:
        await update.callback_query.message.reply_text(text="–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
        return

    active_consultations_list = active_consultations.active_consultations_data
    link_nenaprasno = make_consultations_list(active_consultations_list)
    declination_consultation = get_word_case(active_consultations.active_consultations, "–∑–∞—è–≤–∫–∞", "–∑–∞—è–≤–∫–∏", "–∑–∞—è–≤–æ–∫")

    trello_url = build_trello_url(active_consultations.username_trello, overdue=True)

    message = ACTUAL_TEMPLATE.format(
        active_consultations=active_consultations.active_consultations,
        declination_consultation=declination_consultation,
        link_nenaprasno=link_nenaprasno,
        trello_url=trello_url,
    )
    await reply_message(update=update, text=message)


@async_error_logger(name="conversation.requests.button_overdue_requests_callback")
async def button_overdue_requests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Send information about expiring and overdue consultation.
    """
    service = APIService()
    telegram_id = update.effective_user.id
    expired_consultations = await service.get_user_expired_consultations(telegram_id=telegram_id)
    active_consultations = await service.get_user_active_consultations(telegram_id=telegram_id)

    if expired_consultations is None or active_consultations is None:
        await update.callback_query.message.reply_text(text="–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    expired_consultations_list = expired_consultations.expired_consultations_data
    link_nenaprasno = make_consultations_list(expired_consultations_list)
    trello_url = build_trello_url(expired_consultations.username_trello, overdue=True)

    message = OVERDUE_TEMPLATE.format(
        expired_consultations=expired_consultations.expired_consultations,
        link_nenaprasno=link_nenaprasno,
        active_consultations=active_consultations.active_consultations,
        trello_url=trello_url,
    )
    await reply_message(update=update, text=message)


menu_conversation = ConversationHandler(
    allow_reentry=True,
    persistent=True,
    name="menu_conversation",
    entry_points=[CommandHandler("menu", menu), timezone_conversation],
    states={
        states.MENU_STATE: [
            CallbackQueryHandler(
                button_statistic_month_callback, pattern=callback_data.CALLBACK_STATISTIC_MONTH_COMMAND
            ),
            CallbackQueryHandler(
                button_overdue_requests_callback, pattern=callback_data.CALLBACK_OVERDUE_REQUESTS_COMMAND
            ),
            CallbackQueryHandler(
                button_actual_requests_callback, pattern=callback_data.CALLBACK_ACTUAL_REQUESTS_COMMAND
            ),
            CallbackQueryHandler(
                set_timezone_from_keyboard, pattern=callback_data.CALLBACK_CONFIGURATE_TIMEZONE_COMMAND
            ),
            timezone_conversation,
        ],
    },
    fallbacks=[],
)
