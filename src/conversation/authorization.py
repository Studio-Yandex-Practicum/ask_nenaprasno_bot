from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, ConversationHandler

from constants import callback_data, states
from conversation.menu import menu_conversation
from conversation.timezone import get_timezone, states_timezone_conversation_dict
from core import config
from core.logger import logger
from decorators.logger import async_error_logger
from menu_button import COMMANDS, COMMANDS_UNAUTHORIZED, menu_button
from service.api_client import APIService

SUCCESSFUL_AUTORIZATION_MESSAGE = (
    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_name}"
)
BOT_GREETINGS_MESSAGE = (
    "–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ñ–µ–Ω—è –ö—Ä–∞–±, "
    "—è telegram-bot –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã "
    "'–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'. –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö, "
    "–ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–µ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ "
    "–∏ –∏—Ö –±–ª–∏–∑–∫–∏—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö. "
    "–ù–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. –ù–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –¥–µ–ª–µ! "
    "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ "
    "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
)


@async_error_logger(name="conversation.authorization.start", logger=logger)
async def start(update: Update, context: CallbackContext):
    """
    Responds to the start command. The entry point to telegram bot.
    """
    user_data = await autorize_callback(update, context)

    if user_data != None:
        await update.message.reply_text(
            text=SUCCESSFUL_AUTORIZATION_MESSAGE
                .format(user_name=user_data.user_name)
        )
        await update.message.reply_text(
            text=BOT_GREETINGS_MESSAGE
        )
        await menu_button(context, COMMANDS)
        await get_timezone(update, context)
        return states.TIMEZONE_STATE

    await menu_button(context, COMMANDS_UNAUTHORIZED)
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=callback_data.CALLBACK_IS_EXPERT_COMMAND),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=callback_data.CALLBACK_NOT_EXPERT_COMMAND),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å. "
        "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º?",
        reply_markup=reply_markup,
    )
    return states.UNAUTHORIZED_STATE


@async_error_logger(name="conversation.authorization.not_expert_callback", logger=logger)
async def not_expert_callback(update: Update, context: CallbackContext):
    """
    Invites the user to become an expert.
    """
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data=callback_data.CALLBACK_REGISTER_AS_EXPERT_COMMAND),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=callback_data.CALLBACK_SUPPORT_OR_CONSULT_COMMAND),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text="–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã ***'–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å'***.\n"
        "–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å *–Ω–∞—à–∏–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º* üë®‚Äç‚öïÔ∏è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –±–ª–∏–∑–∫–∏—Ö?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN,
    )
    return states.REGISTRATION_STATE


@async_error_logger(name="conversation.authorization.support_or_consult_callback", logger=logger)
async def support_or_consult_callback(update: Update, context: CallbackContext):
    """
    Offers to support the project.
    """
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url=config.URL_SITE),
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=config.URL_SITE_DONATION),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text='–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã ***"–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å"***.\n'
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–∏, "
        '–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π —Å–ª—É–∂–±—ã ***"–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å"***.',
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN,
    )
    return ConversationHandler.END


@async_error_logger(name="conversation.authorization.register_as_expert_callback", logger=logger)
async def register_as_expert_callback(update: Update, context: CallbackContext):
    """
    Sends a registration form to the user.
    """
    await update.callback_query.message.reply_text(
        text="–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤!\n–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ ü§ó.\n"
        f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç—É [–∞–Ω–∫–µ—Ç—É]({config.FORM_URL_FUTURE_EXPERT})  (–Ω—É–∂–Ω–æ 15 –º–∏–Ω—É—Ç).\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ "
        "–≤–∏–¥–µ–æ–∏–Ω—Ç–µ—Ä–≤—å—é.\n–ü–µ—Ä–µ–¥ –∏–Ω—Ç–µ—Ä–≤—å—é –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –µ–≥–æ –Ω–∞ "
        "–≤—Å—Ç—Ä–µ—á–µ.\n\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ üòä",
        parse_mode=ParseMode.MARKDOWN,
    )
    return ConversationHandler.END


@async_error_logger(name="conversation.authorization.autorize_callback", logger=logger)
async def autorize_callback(update: Update, context: CallbackContext):
    """
    try to authenticate telegram user on site API
    """
    api_service = APIService()
    telegram_id = update.effective_user.id
    user_data = await api_service.authenticate_user(telegram_id=telegram_id)
    if user_data is not None:
        context.user_data["user_name"] = user_data.user_name
        context.user_data["user_time_zone"] = user_data.user_time_zone
        context.user_data["user_name_in_trello"] = user_data.user_name_in_trello
    return user_data


@async_error_logger(name="conversation.authorization.is_expert_callback", logger=logger)
async def is_expert_callback(update: Update, context: CallbackContext):
    """
    try to authenticate telegram user on site API and write trello_id to persistence file
    """
    user_data = await autorize_callback(update, context)

    if user_data == None:
        telegram_id = update.effective_user.id
        message = (
            f"–í–∞—à Telegram-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä - ```{telegram_id}```\n\n"
            f"–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–µ–π—Å-–º–µ–Ω–µ–¥–∂–µ—Ä—É, "
            f"—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        await update.callback_query.edit_message_text(text=message, parse_mode=ParseMode.MARKDOWN)
        return states.UNAUTHORIZED_STATE

    await update.callback_query.edit_message_text(
        text=SUCCESSFUL_AUTORIZATION_MESSAGE
            .format(user_name=user_data.user_name)
    )
    await update.callback_query.message.reply_text(
        text=BOT_GREETINGS_MESSAGE
    )
    await menu_button(context, COMMANDS)
    await get_timezone(update, context)
    return states.TIMEZONE_STATE


authorization_conversation = ConversationHandler(
    allow_reentry=True,
    persistent=True,
    name="authorization_conversation",
    entry_points=[
        CommandHandler("start", start),
    ],
    states={
        states.UNAUTHORIZED_STATE: [
            CallbackQueryHandler(is_expert_callback, pattern=callback_data.CALLBACK_IS_EXPERT_COMMAND),
            CallbackQueryHandler(not_expert_callback, pattern=callback_data.CALLBACK_NOT_EXPERT_COMMAND),
        ],
        states.REGISTRATION_STATE: [
            CallbackQueryHandler(
                register_as_expert_callback, pattern=callback_data.CALLBACK_REGISTER_AS_EXPERT_COMMAND
            ),
            CallbackQueryHandler(
                support_or_consult_callback, pattern=callback_data.CALLBACK_SUPPORT_OR_CONSULT_COMMAND
            ),
        ],
        states.MENU_STATE: [menu_conversation],
        **states_timezone_conversation_dict,
    },
    fallbacks=[],
)
