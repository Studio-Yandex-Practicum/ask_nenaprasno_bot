from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import CallbackContext, ContextTypes, MessageHandler, filters

from constants import callback_data, states
from core.config import URL_SERVICE_RULES
from core.send_message import reply_message
from decorators.logger import async_error_logger
from get_timezone import get_timezone_from_location, get_timezone_from_text_message

TIME_ZONE = "UTC"


@async_error_logger(name="conversation.timezone.get_timezone")
async def get_timezone(update: Update, context: CallbackContext):
    """
    Requests a timezone from the user.
    """
    keyboard = [
        [
            KeyboardButton(
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞", request_location=True
            )
        ],
        [KeyboardButton("–ù–∞–ø–∏—à—É —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É —Å–∞–º")],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message = "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è"
    await reply_message(update=update, text=message, reply_markup=markup)
    return states.TIMEZONE_STATE


@async_error_logger(name="conversation.timezone.check_timezone")
async def check_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE, timezone):
    """
    Sends a message after a successful timezone installation.
    Return state for ConversationHandler.
    """
    if timezone is None:
        await reply_message(
            update=update,
            text=(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: UTC+03:00, UTC-03:00, utc3:0 –∏ –¥–∞–∂–µ 3:0"
            ),
        )
        return states.TIMEZONE_STATE
    buttons_after_timezone = [
        [
            InlineKeyboardButton(
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", callback_data=callback_data.CALLBACK_STATISTIC_MONTH_COMMAND
            ),
        ],
        [InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç–µ", callback_data=callback_data.CALLBACK_ACTUAL_REQUESTS_COMMAND)],
        [InlineKeyboardButton(text="üî• C—Ä–æ–∫–∏ –≥–æ—Ä—è—Ç", callback_data=callback_data.CALLBACK_OVERDUE_REQUESTS_COMMAND)],
        [
            InlineKeyboardButton(
                text="–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞",
                url=URL_SERVICE_RULES,
            )
        ],
    ]
    await reply_message(
        update=update,
        text=f"–í—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å *{timezone}*, —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardRemove(),
    )
    reply_markup = InlineKeyboardMarkup(buttons_after_timezone)
    await reply_message(
        update=update,
        text="–ê –µ—â–µ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ:",
        reply_markup=reply_markup,
    )
    return states.MENU_STATE


@async_error_logger(name="conversation.timezone.get_timezone_from_location_callback")
async def get_timezone_from_location_callback(update: Update, context: CallbackContext):
    """
    Sets timezone by geolocation.
    """
    timezone = await get_timezone_from_location(update, context)
    return await check_timezone(update, context, timezone)


@async_error_logger(name="conversation.timezone.get_timezone_from_text_message_callback")
async def get_timezone_from_text_message_callback(update: Update, context: CallbackContext):
    """
    Sets timezone based on a text message from the user.
    """
    text = str(update.message.text)
    if text == "–ù–∞–ø–∏—à—É —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É —Å–∞–º":
        await reply_message(
            update=update, text="–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É UTC. –ù–∞–ø—Ä–∏–º–µ—Ä: UTC+03:00, UTC-03:00, utc3:0 –∏ –¥–∞–∂–µ 3:0"
        )
        return states.TIMEZONE_STATE
    timezone = await get_timezone_from_text_message(update, context)
    return await check_timezone(update, context, timezone)


states_timezone_conversation_dict = {
    states.TIMEZONE_STATE: [
        MessageHandler(filters.LOCATION, get_timezone_from_location_callback),
        MessageHandler(filters.TEXT & ~filters.COMMAND, get_timezone_from_text_message_callback),
    ],
}
