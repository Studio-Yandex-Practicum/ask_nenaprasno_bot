name: ask_nenaprasno_bot_deploy

on:
  pull_request:
    branches:
      - develop
    types: [closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nenaprasno-ask-bot
  DEPLOY_PATH: /ask/practicum_bot

defaults:
  run:
    working-directory: .

jobs:
  build_and_push_ask_nenaprasno_bot_image:
    if: github.event.pull_request.merged == true
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latestexit
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile_dev
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:stage,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    if: github.event.pull_request.merged == true
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: Stage
    needs: build_and_push_ask_nenaprasno_bot_image
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            sudo rm -f .env
            touch .env
            echo TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }} >> .env
            echo BOT_PORT=${{ secrets.BOT_PORT }} >> .env
            echo WEBHOOK_URL=${{ secrets.WEBHOOK_URL }} >> .env
            echo HOST=${{ secrets.HOST }} >> .env
            echo SECRET_TELEGRAM_TOKEN=${{ secrets.SECRET_TELEGRAM_TOKEN }} >> .env
            echo WEEKLY_STAT_TIME=${{ secrets.WEEKLY_STAT_TIME }} >> .env
            echo WEEKLY_STAT_WEEK_DAYS=${{ secrets.WEEKLY_STAT_WEEK_DAYS }} >> .env
            echo MONTHLY_STAT_TIME=${{ secrets.MONTHLY_STAT_TIME }} >> .env
            echo MONTHLY_STAT_DAY=${{ secrets.MONTHLY_STAT_DAY }} >> .env
            echo MONTHLY_RECEIPT_REMINDER_TIME=${{ secrets.MONTHLY_RECEIPT_REMINDER_TIME }} >> .env
            echo MONTHLY_RECEIPT_REMINDER_DAY=${{ secrets.MONTHLY_RECEIPT_REMINDER_DAY }} >> .env
            echo DAYLY_COLLECT_CONSULTATIONS_TIME=${{ secrets.DAYLY_COLLECT_CONSULTATIONS_TIME }} >> .env
            echo DAILY_CONSULTATIONS_REMINDER_TIME=${{ secrets.DAILY_CONSULTATIONS_REMINDER_TIME }} >> .env
            echo BOT_PERSISTENCE_FILE=${{ secrets.BOT_PERSISTENCE_FILE }} >> .env
            echo SITE_API_URL=${{ secrets.SITE_API_URL }} >> .env
            echo IS_FAKE_API=${{ secrets.IS_FAKE_API }} >> .env
            echo SITE_API_BOT_TOKEN=${{ secrets.SITE_API_BOT_TOKEN }} >> .env
            echo LOG_NAME=${{ secrets.LOG_NAME }} >> .env
            echo TRELLO_BORD_ID=${{ secrets.TRELLO_BORD_ID }} >> .env
            echo URL_ASK_NENAPRASNO=${{ secrets.URL_ASK_NENAPRASNO }} >> .env

            sudo docker image prune -f
            sudo docker pull ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest
            sudo docker-compose --file docker-compose.bot.yaml stop
            sudo docker-compose --file docker-compose.bot.yaml rm bot -f
            sudo docker-compose --file docker-compose.bot.yaml up -d
